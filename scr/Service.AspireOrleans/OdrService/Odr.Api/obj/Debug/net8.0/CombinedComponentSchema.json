{
  "definitions": {
    "logLevel": {
      "properties": {
        "RabbitMQ.Client": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.ChangeTracking": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database.Command": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database.Connection": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database.Transaction": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Infrastructure": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Migrations": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Model": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Model.Validation": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Query": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Update": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure.Core": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure.Identity": {
          "$ref": "#/definitions/logLevelThreshold"
        }
      }
    }
  },
  "properties": {
    "Aspire": {
      "type": "object",
      "properties": {
        "RabbitMQ": {
          "type": "object",
          "properties": {
            "Client": {
              "type": "object",
              "properties": {
                "ConnectionFactory": {
                  "type": "object",
                  "properties": {
                    "AmqpUriSslProtocols": {
                      "enum": [
                        "None",
                        "Ssl2",
                        "Ssl3",
                        "Tls",
                        "Default",
                        "Tls11",
                        "Tls12",
                        "Tls13"
                      ],
                      "description": "The AMQP URI SSL protocols."
                    },
                    "AutomaticRecoveryEnabled": {
                      "type": "boolean",
                      "description": "Set to false to disable automatic connection recovery.\nDefaults to true."
                    },
                    "ClientProvidedName": {
                      "type": "string",
                      "description": "Default client provided name to be used for connections."
                    },
                    "ConsumerDispatchConcurrency": {
                      "type": "integer",
                      "description": "Set to a value greater than one to enable concurrent processing. For a concurrency greater than one \u0027RabbitMQ.Client.IBasicConsumer\u0027 will be offloaded to the worker thread pool so it is important to choose the value for the concurrency wisely to avoid thread pool overloading. \u0027RabbitMQ.Client.IAsyncBasicConsumer\u0027 can handle concurrency much more efficiently due to the non-blocking nature of the consumer.\nDefaults to 1."
                    },
                    "ContinuationTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Amount of time protocol  operations (e.g. queue.declare ) are allowed to take before\ntiming out."
                    },
                    "DefaultAddressFamily": {
                      "enum": [
                        "Unknown",
                        "Unspecified",
                        "Unix",
                        "InterNetwork",
                        "ImpLink",
                        "Pup",
                        "Chaos",
                        "Ipx",
                        "NS",
                        "Iso",
                        "Osi",
                        "Ecma",
                        "DataKit",
                        "Ccitt",
                        "Sna",
                        "DecNet",
                        "DataLink",
                        "Lat",
                        "HyperChannel",
                        "AppleTalk",
                        "NetBios",
                        "VoiceView",
                        "FireFox",
                        "Banyan",
                        "Atm",
                        "InterNetworkV6",
                        "Cluster",
                        "Ieee12844",
                        "Irda",
                        "NetworkDesigners",
                        "Max",
                        "Packet",
                        "ControllerAreaNetwork"
                      ],
                      "description": "Address family used by default.\nUse \u0027System.Net.Sockets.AddressFamily.InterNetwork\u0027 to force to IPv4.\nUse \u0027System.Net.Sockets.AddressFamily.InterNetworkV6\u0027 to force to IPv6.\nOr use \u0027System.Net.Sockets.AddressFamily.Unknown\u0027 to attempt both IPv6 and IPv4."
                    },
                    "DefaultAmqpUriSslProtocols": {
                      "enum": [
                        "None",
                        "Ssl2",
                        "Ssl3",
                        "Tls",
                        "Default",
                        "Tls11",
                        "Tls12",
                        "Tls13"
                      ],
                      "description": "TLS versions enabled by default: TLSv1.2, v1.1, v1.0."
                    },
                    "DispatchConsumersAsync": {
                      "type": "boolean",
                      "description": "Set to true will enable a asynchronous consumer dispatcher which is compatible with \u0027RabbitMQ.Client.IAsyncBasicConsumer\u0027 .\nDefaults to false."
                    },
                    "Endpoint": {
                      "type": "object",
                      "properties": {
                        "AddressFamily": {
                          "enum": [
                            "Unknown",
                            "Unspecified",
                            "Unix",
                            "InterNetwork",
                            "ImpLink",
                            "Pup",
                            "Chaos",
                            "Ipx",
                            "NS",
                            "Iso",
                            "Osi",
                            "Ecma",
                            "DataKit",
                            "Ccitt",
                            "Sna",
                            "DecNet",
                            "DataLink",
                            "Lat",
                            "HyperChannel",
                            "AppleTalk",
                            "NetBios",
                            "VoiceView",
                            "FireFox",
                            "Banyan",
                            "Atm",
                            "InterNetworkV6",
                            "Cluster",
                            "Ieee12844",
                            "Irda",
                            "NetworkDesigners",
                            "Max",
                            "Packet",
                            "ControllerAreaNetwork"
                          ],
                          "description": "Used to force the address family of the endpoint.\nUse \u0027System.Net.Sockets.AddressFamily.InterNetwork\u0027 to force to IPv4.\nUse \u0027System.Net.Sockets.AddressFamily.InterNetworkV6\u0027 to force to IPv6.\nOr use \u0027System.Net.Sockets.AddressFamily.Unknown\u0027 to attempt both IPv6 and IPv4."
                        },
                        "HostName": {
                          "type": "string",
                          "description": "Retrieve or set the hostname of this \u0027RabbitMQ.Client.AmqpTcpEndpoint\u0027."
                        },
                        "Port": {
                          "type": "integer",
                          "description": "Retrieve or set the port number of this\nAmqpTcpEndpoint. A port number of -1 causes the default\nport number."
                        },
                        "Ssl": {
                          "type": "object",
                          "properties": {
                            "AcceptablePolicyErrors": {
                              "enum": [
                                "None",
                                "RemoteCertificateNotAvailable",
                                "RemoteCertificateNameMismatch",
                                "RemoteCertificateChainErrors"
                              ],
                              "description": "Retrieve or set the set of TLS policy (peer verification) errors that are deemed acceptable."
                            },
                            "CertPassphrase": {
                              "type": "string",
                              "description": "Retrieve or set the client certificate passphrase."
                            },
                            "CertPath": {
                              "type": "string",
                              "description": "Retrieve or set the path to client certificate."
                            },
                            "CheckCertificateRevocation": {
                              "type": "boolean",
                              "description": "Attempts to check certificate revocation status. Default is false.\nSet to true to check peer certificate for revocation."
                            },
                            "Enabled": {
                              "type": "boolean",
                              "description": "Controls if TLS should indeed be used. Set to false to disable TLS\non the connection."
                            },
                            "ServerName": {
                              "type": "string",
                              "description": "Retrieve or set server\u0027s expected name.\nThis MUST match the Subject Alternative Name (SAN) or CN on the peer\u0027s (server\u0027s) leaf certificate,\notherwise the TLS connection will fail."
                            },
                            "Version": {
                              "enum": [
                                "None",
                                "Ssl2",
                                "Ssl3",
                                "Tls",
                                "Default",
                                "Tls11",
                                "Tls12",
                                "Tls13"
                              ],
                              "description": "Retrieve or set the TLS protocol version.\nThe client will let the OS pick a suitable version by using \u0027System.Security.Authentication.SslProtocols.None\u0027 .\nIf this option is disabled, e.g.see via app context, the client will attempt to fall back\nto TLSv1.2."
                            }
                          },
                          "description": "Retrieve the TLS options for this AmqpTcpEndpoint. If not set, null is returned."
                        }
                      },
                      "description": "Connection endpoint."
                    },
                    "HandshakeContinuationTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Amount of time protocol handshake operations are allowed to take before\ntiming out."
                    },
                    "HostName": {
                      "type": "string",
                      "description": "The host to connect to."
                    },
                    "MaxMessageSize": {
                      "type": "integer",
                      "description": "Maximum allowed message size, in bytes, from RabbitMQ.\nCorresponds to the rabbit.max_message_size setting."
                    },
                    "NetworkRecoveryInterval": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Amount of time client will wait for before re-trying  to recover connection."
                    },
                    "Password": {
                      "type": "string",
                      "description": "Password to use when authenticating to the server."
                    },
                    "Port": {
                      "type": "integer",
                      "description": "The port to connect on. \u0027RabbitMQ.Client.AmqpTcpEndpoint.UseDefaultPort\u0027 indicates the default for the protocol should be used."
                    },
                    "RequestedChannelMax": {
                      "type": "integer",
                      "description": "Maximum channel number to ask for."
                    },
                    "RequestedConnectionTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Timeout setting for connection attempts."
                    },
                    "RequestedFrameMax": {
                      "type": "integer",
                      "description": "Frame-max parameter to ask for (in bytes)."
                    },
                    "RequestedHeartbeat": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Heartbeat timeout to use when negotiating with the server."
                    },
                    "SocketReadTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Timeout setting for socket read operations."
                    },
                    "SocketWriteTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Timeout setting for socket write operations."
                    },
                    "Ssl": {
                      "type": "object",
                      "properties": {
                        "AcceptablePolicyErrors": {
                          "enum": [
                            "None",
                            "RemoteCertificateNotAvailable",
                            "RemoteCertificateNameMismatch",
                            "RemoteCertificateChainErrors"
                          ],
                          "description": "Retrieve or set the set of TLS policy (peer verification) errors that are deemed acceptable."
                        },
                        "CertPassphrase": {
                          "type": "string",
                          "description": "Retrieve or set the client certificate passphrase."
                        },
                        "CertPath": {
                          "type": "string",
                          "description": "Retrieve or set the path to client certificate."
                        },
                        "CheckCertificateRevocation": {
                          "type": "boolean",
                          "description": "Attempts to check certificate revocation status. Default is false.\nSet to true to check peer certificate for revocation."
                        },
                        "Enabled": {
                          "type": "boolean",
                          "description": "Controls if TLS should indeed be used. Set to false to disable TLS\non the connection."
                        },
                        "ServerName": {
                          "type": "string",
                          "description": "Retrieve or set server\u0027s expected name.\nThis MUST match the Subject Alternative Name (SAN) or CN on the peer\u0027s (server\u0027s) leaf certificate,\notherwise the TLS connection will fail."
                        },
                        "Version": {
                          "enum": [
                            "None",
                            "Ssl2",
                            "Ssl3",
                            "Tls",
                            "Default",
                            "Tls11",
                            "Tls12",
                            "Tls13"
                          ],
                          "description": "Retrieve or set the TLS protocol version.\nThe client will let the OS pick a suitable version by using \u0027System.Security.Authentication.SslProtocols.None\u0027 .\nIf this option is disabled, e.g.see via app context, the client will attempt to fall back\nto TLSv1.2."
                        }
                      },
                      "description": "TLS options setting."
                    },
                    "TopologyRecoveryEnabled": {
                      "type": "boolean",
                      "description": "Set to false to make automatic connection recovery not recover topology (exchanges, queues, bindings, etc).\nDefaults to true."
                    },
                    "Uri": {
                      "type": "string",
                      "format": "uri",
                      "description": "The uri to use for the connection."
                    },
                    "UserName": {
                      "type": "string",
                      "description": "Username to use when authenticating to the server."
                    },
                    "VirtualHost": {
                      "type": "string",
                      "description": "Virtual host to access during this connection."
                    }
                  },
                  "description": "Main entry point to the RabbitMQ .NET AMQP client\nAPI. Constructs \u0027RabbitMQ.Client.IConnection\u0027 instances."
                },
                "ConnectionString": {
                  "type": "string",
                  "description": "Gets or sets the connection string of the RabbitMQ server to connect to."
                },
                "DisableHealthChecks": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the RabbitMQ health check is disabled or not.",
                  "default": false
                },
                "DisableTracing": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                  "default": false
                },
                "MaxConnectRetryCount": {
                  "type": "integer",
                  "description": "Gets or sets the maximum number of connection retry attempts. Default value is 5, set it to 0 to disable the retry mechanism."
                }
              },
              "description": "Provides the client configuration settings for connecting to a RabbitMQ message broker."
            }
          }
        },
        "Microsoft": {
          "type": "object",
          "properties": {
            "EntityFrameworkCore": {
              "type": "object",
              "properties": {
                "SqlServer": {
                  "type": "object",
                  "properties": {
                    "CommandTimeout": {
                      "type": "integer",
                      "description": "Gets or sets the time in seconds to wait for the command to execute."
                    },
                    "ConnectionString": {
                      "type": "string",
                      "description": "The connection string of the SQL server database to connect to."
                    },
                    "DisableHealthChecks": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the database health check is disabled or not.",
                      "default": false
                    },
                    "DisableRetry": {
                      "type": "boolean",
                      "description": "Gets or sets whether retries should be disabled.",
                      "default": false
                    },
                    "DisableTracing": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                      "default": false
                    }
                  },
                  "description": "Provides the client configuration settings for connecting to a SQL Server database using EntityFrameworkCore."
                }
              }
            }
          }
        },
        "Azure": {
          "type": "object",
          "properties": {
            "Storage": {
              "type": "object",
              "properties": {
                "Blobs": {
                  "type": "object",
                  "properties": {
                    "ClientOptions": {
                      "type": "object",
                      "properties": {
                        "Diagnostics": {
                          "type": "object",
                          "properties": {
                            "ApplicationId": {
                              "type": "string",
                              "description": "Gets or sets the value sent as the first part of \u0022User-Agent\u0022 headers for all requests issues by this client. Defaults to \u0027Azure.Core.DiagnosticsOptions.DefaultApplicationId\u0027."
                            },
                            "DefaultApplicationId": {
                              "type": "string",
                              "description": "Gets or sets the default application id. Default application id would be set on all instances."
                            },
                            "IsDistributedTracingEnabled": {
                              "type": "boolean",
                              "description": "Gets or sets value indicating whether distributed tracing activities ( \u0027System.Diagnostics.Activity\u0027 ) are going to be created for the clients methods calls and HTTP calls."
                            },
                            "IsLoggingContentEnabled": {
                              "type": "boolean",
                              "description": "Gets or sets value indicating if request or response content should be logged."
                            },
                            "IsLoggingEnabled": {
                              "type": "boolean",
                              "description": "Get or sets value indicating whether HTTP pipeline logging is enabled."
                            },
                            "IsTelemetryEnabled": {
                              "type": "boolean",
                              "description": "Gets or sets value indicating whether the \u0022User-Agent\u0022 header containing \u0027Azure.Core.DiagnosticsOptions.ApplicationId\u0027 , client library package name and version, \u0027System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription\u0027 and \u0027System.Runtime.InteropServices.RuntimeInformation.OSDescription\u0027 should be sent.\nThe default value can be controlled process wide by setting AZURE_TELEMETRY_DISABLED to true , false , 1 or 0."
                            },
                            "LoggedContentSizeLimit": {
                              "type": "integer",
                              "description": "Gets or sets value indicating maximum size of content to log in bytes. Defaults to 4096."
                            }
                          },
                          "description": "Gets the client diagnostic options."
                        },
                        "EnableTenantDiscovery": {
                          "type": "boolean",
                          "description": "Enables tenant discovery through the authorization challenge when the client is configured to use a TokenCredential.\nWhen enabled, the client will attempt an initial un-authorized request to prompt a challenge in order to discover the correct tenant for the resource."
                        },
                        "EncryptionScope": {
                          "type": "string",
                          "description": "Gets the \u0027Azure.Storage.Blobs.BlobClientOptions.EncryptionScope\u0027 to be used when making requests."
                        },
                        "GeoRedundantSecondaryUri": {
                          "type": "string",
                          "format": "uri",
                          "description": "Gets or sets the secondary storage \u0027System.Uri\u0027 that can be read from for the storage account if the\naccount is enabled for RA-GRS.\n\nIf this property is set, the secondary Uri will be used for GET or HEAD requests during retries.\nIf the status of the response from the secondary Uri is a 404, then subsequent retries for\nthe request will not use the secondary Uri again, as this indicates that the resource\nmay not have propagated there yet. Otherwise, subsequent retries will alternate back and forth\nbetween primary and secondary Uri."
                        },
                        "Retry": {
                          "type": "object",
                          "properties": {
                            "Delay": {
                              "type": "string",
                              "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                              "description": "The delay between retry attempts for a fixed approach or the delay\non which to base calculations for a backoff-based approach.\nIf the service provides a Retry-After response header, the next retry will be delayed by the duration specified by the header value."
                            },
                            "MaxDelay": {
                              "type": "string",
                              "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                              "description": "The maximum permissible delay between retry attempts when the service does not provide a Retry-After response header.\nIf the service provides a Retry-After response header, the next retry will be delayed by the duration specified by the header value."
                            },
                            "MaxRetries": {
                              "type": "integer",
                              "description": "The maximum number of retry attempts before giving up."
                            },
                            "Mode": {
                              "enum": [
                                "Fixed",
                                "Exponential"
                              ],
                              "description": "The approach to use for calculating retry delays."
                            },
                            "NetworkTimeout": {
                              "type": "string",
                              "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                              "description": "The timeout applied to an individual network operations."
                            }
                          },
                          "description": "Gets the client retry options."
                        },
                        "TransferValidation": {
                          "type": "object",
                          "properties": {
                            "Download": {
                              "type": "object",
                              "properties": {
                                "AutoValidateChecksum": {
                                  "type": "boolean",
                                  "description": "Defaults to true. False can only be specified on specific operations and not at the client level.\nIndicates whether the SDK should validate the content\nbody against the content hash before returning contents to the caller.\nIf set to false, caller is responsible for extracting the hash out\nof the \u0027Azure.Response\u00601\u0027 and validating the hash themselves."
                                },
                                "ChecksumAlgorithm": {
                                  "enum": [
                                    "Auto",
                                    "None",
                                    "MD5",
                                    "StorageCrc64"
                                  ],
                                  "description": "Checksum algorithm to use."
                                }
                              },
                              "description": "Options on download."
                            },
                            "Upload": {
                              "type": "object",
                              "properties": {
                                "ChecksumAlgorithm": {
                                  "enum": [
                                    "Auto",
                                    "None",
                                    "MD5",
                                    "StorageCrc64"
                                  ],
                                  "description": "Checksum algorithm to use."
                                }
                              },
                              "description": "Options on upload."
                            }
                          },
                          "description": "Configures whether to send or receive checksum headers for blob uploads and downloads. Downloads\ncan optionally validate that the content matches the checksum."
                        },
                        "TrimBlobNameSlashes": {
                          "type": "boolean",
                          "description": "Whether to trim leading and trailing slashes on a blob name when using \u0027Azure.Storage.Blobs.BlobContainerClient.GetBlobClient(System.String)\u0027 and similar methods.\nDefaults to true for backwards compatibility."
                        }
                      },
                      "description": "Provides the client configuration options for connecting to Azure Blob\nStorage."
                    },
                    "ConnectionString": {
                      "type": "string",
                      "description": "Gets or sets the connection string used to connect to the blob service."
                    },
                    "DisableHealthChecks": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the Blob Storage health check is disabled or not.",
                      "default": false
                    },
                    "DisableTracing": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                      "default": false
                    },
                    "ServiceUri": {
                      "type": "string",
                      "format": "uri",
                      "description": "A \u0027System.Uri\u0027 referencing the blob service.\nThis is likely to be similar to \u0022https://{account_name}.blob.core.windows.net\u0022."
                    }
                  },
                  "description": "Provides the client configuration settings for connecting to Azure Blob Storage."
                }
              }
            },
            "Data": {
              "type": "object",
              "properties": {
                "Tables": {
                  "type": "object",
                  "properties": {
                    "ClientOptions": {
                      "type": "object",
                      "properties": {
                        "Diagnostics": {
                          "type": "object",
                          "properties": {
                            "ApplicationId": {
                              "type": "string",
                              "description": "Gets or sets the value sent as the first part of \u0022User-Agent\u0022 headers for all requests issues by this client. Defaults to \u0027Azure.Core.DiagnosticsOptions.DefaultApplicationId\u0027."
                            },
                            "DefaultApplicationId": {
                              "type": "string",
                              "description": "Gets or sets the default application id. Default application id would be set on all instances."
                            },
                            "IsDistributedTracingEnabled": {
                              "type": "boolean",
                              "description": "Gets or sets value indicating whether distributed tracing activities ( \u0027System.Diagnostics.Activity\u0027 ) are going to be created for the clients methods calls and HTTP calls."
                            },
                            "IsLoggingContentEnabled": {
                              "type": "boolean",
                              "description": "Gets or sets value indicating if request or response content should be logged."
                            },
                            "IsLoggingEnabled": {
                              "type": "boolean",
                              "description": "Get or sets value indicating whether HTTP pipeline logging is enabled."
                            },
                            "IsTelemetryEnabled": {
                              "type": "boolean",
                              "description": "Gets or sets value indicating whether the \u0022User-Agent\u0022 header containing \u0027Azure.Core.DiagnosticsOptions.ApplicationId\u0027 , client library package name and version, \u0027System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription\u0027 and \u0027System.Runtime.InteropServices.RuntimeInformation.OSDescription\u0027 should be sent.\nThe default value can be controlled process wide by setting AZURE_TELEMETRY_DISABLED to true , false , 1 or 0."
                            },
                            "LoggedContentSizeLimit": {
                              "type": "integer",
                              "description": "Gets or sets value indicating maximum size of content to log in bytes. Defaults to 4096."
                            }
                          },
                          "description": "Gets the client diagnostic options."
                        },
                        "EnableTenantDiscovery": {
                          "type": "boolean",
                          "description": "Enables tenant discovery through the authorization challenge when the client is configured to use a TokenCredential.\nWhen true , the client will attempt an initial un-authorized request to prompt an OAuth challenge in order to discover the correct tenant for the resource."
                        },
                        "Retry": {
                          "type": "object",
                          "properties": {
                            "Delay": {
                              "type": "string",
                              "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                              "description": "The delay between retry attempts for a fixed approach or the delay\non which to base calculations for a backoff-based approach.\nIf the service provides a Retry-After response header, the next retry will be delayed by the duration specified by the header value."
                            },
                            "MaxDelay": {
                              "type": "string",
                              "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                              "description": "The maximum permissible delay between retry attempts when the service does not provide a Retry-After response header.\nIf the service provides a Retry-After response header, the next retry will be delayed by the duration specified by the header value."
                            },
                            "MaxRetries": {
                              "type": "integer",
                              "description": "The maximum number of retry attempts before giving up."
                            },
                            "Mode": {
                              "enum": [
                                "Fixed",
                                "Exponential"
                              ],
                              "description": "The approach to use for calculating retry delays."
                            },
                            "NetworkTimeout": {
                              "type": "string",
                              "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                              "description": "The timeout applied to an individual network operations."
                            }
                          },
                          "description": "Gets the client retry options."
                        }
                      },
                      "description": "Options to configure the requests to the Table service."
                    },
                    "ConnectionString": {
                      "type": "string",
                      "description": "Gets or sets the connection string used to connect to the table service account."
                    },
                    "DisableHealthChecks": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the health check is disabled or not.",
                      "default": false
                    },
                    "DisableTracing": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                      "default": false
                    },
                    "ServiceUri": {
                      "type": "string",
                      "format": "uri",
                      "description": "A \u0027System.Uri\u0027 referencing the table service account.\nThis is likely to be similar to \u0022https://{account_name}.table.core.windows.net/\u0022 or \u0022https://{account_name}.table.cosmos.azure.com/\u0022."
                    }
                  },
                  "description": "Provides the client configuration settings for connecting to Azure Tables."
                }
              }
            }
          }
        }
      }
    }
  },
  "type": "object",
  "SourceSegments": "C:\\Users\\PaperHammer\\.nuget\\packages\\aspire.rabbitmq.client\\8.0.1\\ConfigurationSchema.json;C:\\Users\\PaperHammer\\.nuget\\packages\\aspire.microsoft.entityframeworkcore.sqlserver\\8.0.1\\ConfigurationSchema.json;C:\\Users\\PaperHammer\\.nuget\\packages\\aspire.azure.storage.blobs\\8.0.1\\ConfigurationSchema.json;C:\\Users\\PaperHammer\\.nuget\\packages\\aspire.azure.data.tables\\8.0.1\\ConfigurationSchema.json"
}